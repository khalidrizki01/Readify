// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @map(name: "user_id")
  expires      DateTime
  sessionToken String     @unique @map(name: "session_token")
  accessToken  String     @unique @map(name: "access_token")
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime? @map(name: "email_verified")
  password      String
  bookIDs       String[]  @db.ObjectId
  booksRead     Book[]    @relation(fields: [bookIDs], references: [id])
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String     @unique
  expires    DateTime
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Genre {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  bookIDs   String[]  @db.ObjectId
  books     Book[]    @relation(fields: [bookIDs], references: [id])
}

model Book {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  book_title      String
  ISBN            String
  author          String
  publisher       String
  year_published  Int
  cover_link      String
  like_count      Int       @default(0)

  genreIDs        String[]  @db.ObjectId
  genres          Genre[]   @relation(fields: [genreIDs], references: [id])

  userIDs         String[]  @db.ObjectId
  users           User[]    @relation(fields: [userIDs], references: [id])
}