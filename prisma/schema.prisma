// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @map(name: "user_id")
  expires      DateTime
  sessionToken String     @unique @map(name: "session_token")
  accessToken  String     @unique @map(name: "access_token")
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String     @unique
  expires    DateTime
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  username            String    @unique
  email               String    @unique
  emailVerified       DateTime? @map(name: "email_verified")
  password            String

  booksReadIDs        String[]  @db.ObjectId
  booksRead           Book[]    @relation(fields: [booksReadIDs], references: [id])

  recommendations     Book[]    @relation(fields: [recommendationIDs], references: [id])
  recommendationIDs   String[]  @db.ObjectId

  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @map(name: "updated_at")

  ratings             Rating[]
}

model Book {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  book_id             Int       
  book_title          String
  ISBN                String
  authors             String[]
  language_code       String
  average_rating      Float     @default(0)
  rating_count        Int       @default(0)
  year_published      Int
  image_url           String

  userReadingIDs      String[]  @db.ObjectId
  users               User[]    @relation(fields: [userReadingIDs], references: [id])

  ratings             Rating[]

  recommendToUserIDs  String[]  @db.ObjectId
  recommendToUsers    User[]    @relation(fields:[recommendToUserIDs], references: [id])
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  bookId    String   @db.ObjectId
  rating    Int
  createdAt DateTime @default(now()) @map(name: "created_at")

  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}